using CalendarApp.Models;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace CalendarApp
{
    public partial class AddEventForm : Form
    {
        public string EventText { get; private set; }
        public string EventDescription { get; private set; }
        public DateTime EventDate { get; private set; }
        public DateTime StartTime { get; private set; }
        public DateTime EndTime { get; private set; }
        public bool IsAllDay { get; private set; }
        public EventCategory EventCategory { get; private set; }
        public string EventColor { get; private set; }
        public ReminderType Reminder { get; private set; }

        private TextBox _titleTextBox;
        private TextBox _descriptionTextBox;
        private DateTimePicker _datePicker;
        private DateTimePicker _startTimePicker;
        private DateTimePicker _endTimePicker;
        private CheckBox _allDayCheckBox;
        private ComboBox _categoryComboBox;
        private ComboBox _reminderComboBox;
        private Button _colorButton;
        private Button _saveButton;
        private Button _cancelButton;

        public AddEventForm(DateTime selectedDate)
        {
            InitializeComponent(selectedDate);
        }

        private void InitializeComponent(DateTime selectedDate)
        {
            Text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ";
            Size = new Size(500, 550);
            StartPosition = FormStartPosition.CenterParent;
            BackColor = Color.White;
            Padding = new Padding(20);
            FormBorderStyle = FormBorderStyle.FixedDialog;
            MaximizeBox = false;
            MinimizeBox = false;

            var mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.White,
                AutoScroll = true
            };

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var headerLabel = new Label
            {
                Text = "–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                Font = new Font("Segoe UI", 16, FontStyle.Bold),
                ForeColor = Color.FromArgb(70, 130, 180),
                Size = new Size(400, 40),
                Location = new Point(0, 10),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            var titleLabel = new Label
            {
                Text = "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(0, 60)
            };

            _titleTextBox = new TextBox
            {
                Location = new Point(0, 85),
                Size = new Size(400, 25),
                Font = new Font("Segoe UI", 9)
            };

            // –û–ø–∏—Å–∞–Ω–∏–µ
            var descLabel = new Label
            {
                Text = "–û–ø–∏—Å–∞–Ω–∏–µ:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(0, 120)
            };

            _descriptionTextBox = new TextBox
            {
                Location = new Point(0, 145),
                Size = new Size(400, 60),
                Font = new Font("Segoe UI", 9),
                Multiline = true,
                ScrollBars = ScrollBars.Vertical
            };

            // –î–∞—Ç–∞
            var dateLabel = new Label
            {
                Text = "–î–∞—Ç–∞:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(0, 220)
            };

            _datePicker = new DateTimePicker
            {
                Location = new Point(0, 245),
                Size = new Size(200, 25),
                Format = DateTimePickerFormat.Short,
                Value = selectedDate
            };

            // –¶–µ–ª–æ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            _allDayCheckBox = new CheckBox
            {
                Text = "–¶–µ–ª–æ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ",
                Font = new Font("Segoe UI", 9),
                Size = new Size(200, 20),
                Location = new Point(220, 245),
                Checked = false
            };
            _allDayCheckBox.CheckedChanged += AllDayCheckBox_CheckedChanged;

            // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            var startTimeLabel = new Label
            {
                Text = "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(0, 280)
            };

            _startTimePicker = new DateTimePicker
            {
                Location = new Point(0, 305),
                Size = new Size(150, 25),
                Format = DateTimePickerFormat.Time,
                ShowUpDown = true,
                Value = DateTime.Today.AddHours(10) // 10:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            };

            // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            var endTimeLabel = new Label
            {
                Text = "–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(0, 340)
            };

            _endTimePicker = new DateTimePicker
            {
                Location = new Point(0, 365),
                Size = new Size(150, 25),
                Format = DateTimePickerFormat.Time,
                ShowUpDown = true,
                Value = DateTime.Today.AddHours(11) // 11:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            };

            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
            var categoryLabel = new Label
            {
                Text = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(0, 400)
            };

            _categoryComboBox = new ComboBox
            {
                Location = new Point(0, 425),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Font = new Font("Segoe UI", 9)
            };

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            foreach (EventCategory category in Enum.GetValues(typeof(EventCategory)))
            {
                _categoryComboBox.Items.Add(new CategoryItem(category));
            }
            _categoryComboBox.SelectedIndex = 0;

            // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            var reminderLabel = new Label
            {
                Text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:",
                Font = new Font("Segoe UI", 10, FontStyle.Bold),
                Size = new Size(200, 20),
                Location = new Point(220, 400)
            };

            _reminderComboBox = new ComboBox
            {
                Location = new Point(220, 425),
                Size = new Size(200, 25),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Font = new Font("Segoe UI", 9)
            };

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            _reminderComboBox.Items.Add("–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è");
            _reminderComboBox.Items.Add("–ó–∞ 5 –º–∏–Ω—É—Ç");
            _reminderComboBox.Items.Add("–ó–∞ 15 –º–∏–Ω—É—Ç");
            _reminderComboBox.Items.Add("–ó–∞ 30 –º–∏–Ω—É—Ç");
            _reminderComboBox.Items.Add("–ó–∞ 1 —á–∞—Å");
            _reminderComboBox.Items.Add("–ó–∞ 1 –¥–µ–Ω—å");
            _reminderComboBox.SelectedIndex = 0;

            // –ö–Ω–æ–ø–∫–∏
            _saveButton = new Button
            {
                Text = "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                Location = new Point(100, 470),
                Size = new Size(120, 35),
                BackColor = Color.FromArgb(34, 139, 34),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 10)
            };
            _saveButton.Click += SaveButton_Click;

            _cancelButton = new Button
            {
                Text = "‚ùå –û—Ç–º–µ–Ω–∞",
                Location = new Point(240, 470),
                Size = new Size(120, 35),
                BackColor = Color.FromArgb(220, 20, 60),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 10)
            };
            _cancelButton.Click += (s, e) => DialogResult = DialogResult.Cancel;

            mainPanel.Controls.AddRange(new Control[]
            {
                headerLabel,
                titleLabel,
                _titleTextBox,
                descLabel,
                _descriptionTextBox,
                dateLabel,
                _datePicker,
                _allDayCheckBox,
                startTimeLabel,
                _startTimePicker,
                endTimeLabel,
                _endTimePicker,
                categoryLabel,
                _categoryComboBox,
                reminderLabel,
                _reminderComboBox,
                _saveButton,
                _cancelButton
            });

            Controls.Add(mainPanel);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            UpdateTimeControlsVisibility();
        }

        private void AllDayCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            UpdateTimeControlsVisibility();
        }

        private void UpdateTimeControlsVisibility()
        {
            bool enabled = !_allDayCheckBox.Checked;

            _startTimePicker.Enabled = enabled;
            _endTimePicker.Enabled = enabled;

            if (_allDayCheckBox.Checked)
            {
                _startTimePicker.Value = DateTime.Today;
                _endTimePicker.Value = DateTime.Today;
            }
        }

        private void SaveButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(_titleTextBox.Text))
            {
                MessageBox.Show("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è!", "–û—à–∏–±–∫–∞",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                _titleTextBox.Focus();
                return;
            }

            if (_startTimePicker.Value >= _endTimePicker.Value && !_allDayCheckBox.Checked)
            {
                MessageBox.Show("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!", "–û—à–∏–±–∫–∞",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            EventText = _titleTextBox.Text.Trim();
            EventDescription = _descriptionTextBox.Text.Trim();
            EventDate = _datePicker.Value.Date;
            StartTime = _allDayCheckBox.Checked ? EventDate : _startTimePicker.Value;
            EndTime = _allDayCheckBox.Checked ? EventDate : _endTimePicker.Value;
            IsAllDay = _allDayCheckBox.Checked;

            if (_categoryComboBox.SelectedItem is CategoryItem categoryItem)
            {
                EventCategory = categoryItem.Category;
            }
            else
            {
                EventCategory = EventCategory.Other;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            EventColor = GetCategoryColor(EventCategory);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            Reminder = _reminderComboBox.SelectedIndex switch
            {
                0 => ReminderType.None,
                1 => ReminderType.FiveMinutes,
                2 => ReminderType.FifteenMinutes,
                3 => ReminderType.ThirtyMinutes,
                4 => ReminderType.OneHour,
                5 => ReminderType.OneDay,
                _ => ReminderType.None
            };

            DialogResult = DialogResult.OK;
            Close();
        }

        private string GetCategoryColor(EventCategory category)
        {
            return category switch
            {
                EventCategory.Work => "#FF6B6B",      // –ö—Ä–∞—Å–Ω—ã–π
                EventCategory.Personal => "#4ECDC4",   // –ë–∏—Ä—é–∑–æ–≤—ã–π
                EventCategory.Holiday => "#FFD166",    // –ñ–µ–ª—Ç—ã–π
                EventCategory.Birthday => "#FF9E6D",   // –û—Ä–∞–Ω–∂–µ–≤—ã–π
                EventCategory.Meeting => "#06D6A0",    // –ó–µ–ª–µ–Ω—ã–π
                EventCategory.Appointment => "#118AB2", // –°–∏–Ω–∏–π
                EventCategory.Other => "#9D4EDD",      // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
                _ => "#6C757D"                         // –°–µ—Ä—ã–π
            };
        }

        // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        private class CategoryItem
        {
            public EventCategory Category { get; }
            public string DisplayName { get; }

            public CategoryItem(EventCategory category)
            {
                Category = category;
                DisplayName = GetCategoryDisplayName(category);
            }

            private string GetCategoryDisplayName(EventCategory category)
            {
                return category switch
                {
                    EventCategory.Work => "üíº –†–∞–±–æ—Ç–∞",
                    EventCategory.Personal => "üë§ –õ–∏—á–Ω–æ–µ",
                    EventCategory.Holiday => "üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫",
                    EventCategory.Birthday => "üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                    EventCategory.Meeting => "ü§ù –í—Å—Ç—Ä–µ—á–∞",
                    EventCategory.Appointment => "üìÖ –í—Å—Ç—Ä–µ—á–∞",
                    EventCategory.Other => "üìå –î—Ä—É–≥–æ–µ",
                    _ => category.ToString()
                };
            }

            public override string ToString() => DisplayName;
        }
    }
}